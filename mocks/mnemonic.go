// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	ed25519 "crypto/ed25519"

	mock "github.com/stretchr/testify/mock"
)

// Mnemonic is an autogenerated mock type for the Mnemonic type
type Mnemonic struct {
	mock.Mock
}

// Mnemonic provides a mock function with given fields:
func (_m *Mnemonic) Mnemonic() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// PrivateKey provides a mock function with given fields:
func (_m *Mnemonic) PrivateKey() ed25519.PrivateKey {
	ret := _m.Called()

	var r0 ed25519.PrivateKey
	if rf, ok := ret.Get(0).(func() ed25519.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ed25519.PrivateKey)
		}
	}

	return r0
}

// PublicKey provides a mock function with given fields:
func (_m *Mnemonic) PublicKey() ed25519.PublicKey {
	ret := _m.Called()

	var r0 ed25519.PublicKey
	if rf, ok := ret.Get(0).(func() ed25519.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ed25519.PublicKey)
		}
	}

	return r0
}

// PublicKeySigned provides a mock function with given fields:
func (_m *Mnemonic) PublicKeySigned() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Mnemonic) String() {
	_m.Called()
}
